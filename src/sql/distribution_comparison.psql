CREATE OR REPLACE FUNCTION _compare_pair (a_id integer, b_id integer, scale_by_distribution boolean)
    RETURNS float
    AS $$
DECLARE
    a_row RECORD;
    b_row RECORD;
    mean float;
    std float;
    value_a float;
    value_b float;
    z_a float;
    z_b float;
    similarity float;
BEGIN
    -- Fetch the two rows to compare
    SELECT
        *
    FROM
        distribution_category
    WHERE
        id = a_id INTO a_row;
    SELECT
        *
    FROM
        distribution_category
    WHERE
        id = b_id INTO b_row;
    -- Check if the rows have the same hadm_id or if their IDs are different
    IF a_row.hadm_id = b_row.hadm_id THEN
        RETURN 1.0;
    END IF;
    IF a_row.id != b_row.id THEN
        RETURN NULL;
    END IF;
    -- Check if the values are valid and if the mean and standard deviation are not null
    IF NOT value_is_valid (a_row.value) OR NOT value_is_valid (b_row.value) THEN
        RETURN NULL;
    END IF;
    IF a_row.id_mean IS NULL OR a_row.id_std_dev IS NULL THEN
        RETURN NULL;
    END IF;
    -- Compute the mean, standard deviation, and z-scores for the two rows
    mean := a_row.id_mean;
    std := a_row.id_std_dev;
    value_a := a_row.value;
    value_b := b_row.value;
    z_a := cdf_normal ((value_a - mean) / std);
    z_b := cdf_normal ((value_b - mean) / std);
    -- Compute the similarity score based on the z-scores
    IF z_a >= z_b THEN
        similarity := z_b / z_a;
    ELSE
        similarity := z_a / z_b;
    END IF;
    -- Optionally scale the similarity score by the distribution
    IF scale_by_distribution THEN
        similarity := similarity * (2 * ABS((z_a + z_b) / 2 - 0.5));
    END IF;
    RETURN similarity;
END;
$$
LANGUAGE plpgsql;

